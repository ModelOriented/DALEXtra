% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/champion_challenger.R
\name{champion_challenger}
\alias{champion_challenger}
\title{Create model comparison}
\usage{
champion_challenger(champion, challenger, variable = NULL, type,
  control = rpart::rpart.control(maxdepth = 4, minbucket = 27, cp =
  0.0082212), ...)
}
\arguments{
\item{champion}{- explainer of model that is supposed to be challenged}

\item{challenger}{- explainer of model that is supposed to beat champion}

\item{variable}{- variable that is going to be used in "prediction versus varaible" comparison}

\item{type}{- classification or regression}

\item{control}{- rpart.control object that will be passed to rpart tree}

\item{...}{- other arguments that will ba passed to rmarkdown::render()}
}
\value{
html raport
}
\description{
DALEX is designed to work with various black-box models like tree ensembles, linear models, neural networks etc.
Threfore we may want to compare our models using such a usefull tool.
}
\examples{
if(DALEXtra:::is_conda()) {
library("DALEXtra")
titanic_test <- read.csv(system.file("extdata", "titanic_test.csv", package = "DALEXtra"))
titanic_train <- read.csv(system.file("extdata", "titanic_train.csv", package = "DALEXtra"))
library("mlr")
task <- mlr::makeClassifTask(
id = "R",
data = titanic_train,
target = "survived"
)
learner <- mlr::makeLearner(
  "classif.gbm",
  par.vals = list(
    distribution = "bernoulli",
    n.trees = 500,
    interaction.depth = 4,
    n.minobsinnode = 12,
    shrinkage = 0.001,
    bag.fraction = 0.5,
    train.fraction = 1
  ),
  predict.type = "prob"
)
gbm <- mlr::train(learner, task)
explainer_mlr <- explain_mlr(gbm, titanic_test[,1:17], titanic_test[,18])


# Explainer build (Keep in mind that 18th column is target)
titanic_test <- read.csv(system.file("extdata", "titanic_test.csv", package = "DALEXtra"))
# Keep in mind that when pickle is being built and loaded,
# not only Python version but libraries versions has to match aswell
explainer_scikit <- explain_scikitlearn(system.file("extdata",
                                                    "scikitlearn.pkl",
                                                    package = "DALEXtra"),
                                        yml = system.file("extdata",
                                                          "scikitlearn_unix.yml",
                                                          package = "DALEXtra"),
                                        data = titanic_test[,1:17],
                                        y = titanic_test$survived)

champion_challenger(explainer_mlr, explainer_scikit, type = "classification",
                    variable = c("fare", "age"))
} else {
  print('Conda is required.')
}
}
